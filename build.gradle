plugins {
    id("java")
    id("org.springframework.boot") version "${dependencyVersionSpringBoot}"
    id("io.spring.dependency-management") version "${pluginVersionSpringDepMgmt}"
    id("jacoco")
}

group =("au.com.belong")
version =("1.0.0")

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    java {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    dependencies {
        // Dev Dependencies
        // Spring & Spring Boot Dependencies
        implementation("org.springframework.boot:spring-boot-starter-web:${dependencyVersionSpringBoot}")
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("com.h2database:h2") // For in-memory DB

        // Swagger & Spring doc
        implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${dependencyVersionSpringDoc}")

        // Testing (JUnit 5 and Spring Boot test)
        testImplementation("org.springframework.boot:spring-boot-starter-test:${dependencyVersionSpringBoot}")
        testImplementation(platform("org.junit:junit-bom:${dependencyVersionJunit}"))
        testImplementation("org.junit.jupiter:junit-jupiter")

        implementation project(':stub:customer-management-stub')
    }

    test {
        useJUnitPlatform()
    }
}

//Test Coverage
jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
    }

    // Include only controller, service, and repository packages
    def filteredClassDirs = fileTree(dir: "$buildDir/classes/java/main", include: [
            "au/com/belong/phone/management/controller/**",
            "au/com/belong/phone/management/service/**",
            "au/com/belong/phone/management/repository/**"
    ])

    classDirectories.setFrom(files(filteredClassDirs))
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element =("CLASS")

            // Only include classes in service, controller, and repository packages
            includes = [
                   ("au/com/belong/phone/management/service/*"),
                   ("au/com/belong/phone/management/controller/*"),
                   ("au/com/belong/phone/management/utils/*")
            ]

            limit {
                counter =("INSTRUCTION")
                value =("COVEREDRATIO")
                minimum = 0.80 // 80% threshold
            }
        }
    }
}